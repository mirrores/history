<?php

/**
 * BaseWeddingSign
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property integer $id
 * @property integer $wedding_id
 * @property integer $user_id
 * @property string $bridegroom_name
 * @property string $bridegroom_company
 * @property string $bridegroom_email
 * @property string $bridegroom_address
 * @property string $bridegroom_mobile
 * @property string $bridegroom_zipcode
 * @property string $bridegroom_qq
 * @property string $bride_name
 * @property string $bride_company
 * @property string $bride_email
 * @property string $bride_address
 * @property string $bride_mobile
 * @property string $bride_qq
 * @property string $bride_zipcode
 * @property string $teacher_name
 * @property string $teacher_department
 * @property string $teacher_tel
 * @property string $teacher_email
 * @property string $teacher_reason
 * @property string $said_alma_mater
 * @property string $love_declaration
 * @property timestamp $sign_at
 * @property string $remarks
 * @property integer $hits_num
 * @property integer $votes_num
 * @property integer $good_num
 * @property boolean $is_verify
 * @property boolean $is_anonymous
 * @property string $diploma_path
 * @property string $marriage_certificate_path
 * @property string $photo_path
 * @property Wedding $Wedding
 * @property User $User
 * @property Doctrine_Collection $WeddingVotes
 * 
 * @package    ##PACKAGE##
 * @subpackage ##SUBPACKAGE##
 * @author     ##NAME## <##EMAIL##>
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
abstract class BaseWeddingSign extends Doctrine_Record
{
    public function setTableDefinition()
    {
        $this->setTableName('wedding_sign');
        $this->hasColumn('id', 'integer', 4, array(
             'type' => 'integer',
             'primary' => true,
             'autoincrement' => true,
             'length' => '4',
             ));
        $this->hasColumn('wedding_id', 'integer', 6, array(
             'type' => 'integer',
             'length' => '6',
             ));
        $this->hasColumn('user_id', 'integer', 11, array(
             'type' => 'integer',
             'length' => '11',
             ));
        $this->hasColumn('bridegroom_name', 'string', 50, array(
             'type' => 'string',
             'length' => '50',
             ));
        $this->hasColumn('bridegroom_company', 'string', 250, array(
             'type' => 'string',
             'length' => '250',
             ));
        $this->hasColumn('bridegroom_email', 'string', 250, array(
             'type' => 'string',
             'length' => '250',
             ));
        $this->hasColumn('bridegroom_address', 'string', 250, array(
             'type' => 'string',
             'length' => '250',
             ));
        $this->hasColumn('bridegroom_mobile', 'string', 250, array(
             'type' => 'string',
             'length' => '250',
             ));
        $this->hasColumn('bridegroom_zipcode', 'string', 250, array(
             'type' => 'string',
             'length' => '250',
             ));
        $this->hasColumn('bridegroom_qq', 'string', 20, array(
             'type' => 'string',
             'length' => '20',
             ));
        $this->hasColumn('bride_name', 'string', 50, array(
             'type' => 'string',
             'length' => '50',
             ));
        $this->hasColumn('bride_company', 'string', 250, array(
             'type' => 'string',
             'length' => '250',
             ));
        $this->hasColumn('bride_email', 'string', 250, array(
             'type' => 'string',
             'length' => '250',
             ));
        $this->hasColumn('bride_address', 'string', 250, array(
             'type' => 'string',
             'length' => '250',
             ));
        $this->hasColumn('bride_mobile', 'string', 250, array(
             'type' => 'string',
             'length' => '250',
             ));
        $this->hasColumn('bride_qq', 'string', 20, array(
             'type' => 'string',
             'length' => '20',
             ));
        $this->hasColumn('bride_zipcode', 'string', 250, array(
             'type' => 'string',
             'length' => '250',
             ));
        $this->hasColumn('teacher_name', 'string', 250, array(
             'type' => 'string',
             'length' => '250',
             ));
        $this->hasColumn('teacher_department', 'string', 250, array(
             'type' => 'string',
             'length' => '250',
             ));
        $this->hasColumn('teacher_tel', 'string', 250, array(
             'type' => 'string',
             'length' => '250',
             ));
        $this->hasColumn('teacher_email', 'string', 250, array(
             'type' => 'string',
             'length' => '250',
             ));
        $this->hasColumn('teacher_reason', 'string', 250, array(
             'type' => 'string',
             'length' => '250',
             ));
        $this->hasColumn('said_alma_mater', 'string', 250, array(
             'type' => 'string',
             'length' => '250',
             ));
        $this->hasColumn('love_declaration', 'string', null, array(
             'type' => 'string',
             ));
        $this->hasColumn('sign_at', 'timestamp', null, array(
             'type' => 'timestamp',
             ));
        $this->hasColumn('remarks', 'string', null, array(
             'type' => 'string',
             ));
        $this->hasColumn('hits_num', 'integer', 4, array(
             'type' => 'integer',
             'default' => 0,
             'length' => '4',
             ));
        $this->hasColumn('votes_num', 'integer', 4, array(
             'type' => 'integer',
             'default' => 0,
             'length' => '4',
             ));
        $this->hasColumn('good_num', 'integer', 4, array(
             'type' => 'integer',
             'default' => 0,
             'length' => '4',
             ));
        $this->hasColumn('is_verify', 'boolean', null, array(
             'type' => 'boolean',
             'default' => false,
             ));
        $this->hasColumn('is_anonymous', 'boolean', null, array(
             'type' => 'boolean',
             'default' => false,
             ));
        $this->hasColumn('diploma_path', 'string', 250, array(
             'type' => 'string',
             'length' => '250',
             ));
        $this->hasColumn('marriage_certificate_path', 'string', 250, array(
             'type' => 'string',
             'length' => '250',
             ));
        $this->hasColumn('photo_path', 'string', 250, array(
             'type' => 'string',
             'length' => '250',
             ));

        $this->option('type', 'MYISAM');
    }

    public function setUp()
    {
        parent::setUp();
        $this->hasOne('Wedding', array(
             'local' => 'wedding_id',
             'foreign' => 'id'));

        $this->hasOne('User', array(
             'local' => 'user_id',
             'foreign' => 'id'));

        $this->hasMany('WeddingVote as WeddingVotes', array(
             'local' => 'id',
             'foreign' => 'sign_id'));
    }
}